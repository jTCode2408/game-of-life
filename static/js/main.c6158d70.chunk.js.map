{"version":3,"sources":["components/Helpers.js","components/styles.js","components/Grid.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["ops","clearGrid","rows","i","push","Array","from","fill","AppCont","styled","div","Title","h1","Pages","Gen","h2","GridHolder","StyledButton","button","AboutCont","RulesTitle","StoryTitle","ol","li","p","Grid","useState","generation","setGen","genRef","useRef","current","grid","setGrid","running","setRunning","runRef","interval","setInterval","intRef","runSim","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","className","name","placeholder","value","onChange","e","target","onClick","alert","Math","random","style","display","gridTemplateColumns","boxSizing","map","col","key","newGrid","width","height","backgroundColor","border","About","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c6158d70.chunk.js","sourcesContent":["///helper functions \r\nimport React from 'react';\r\n\r\nexport const numRows = 25;\r\nexport const numCols = 25;\r\n\r\nexport const ops =[\r\n    [0,1],\r\n    [0,-1],\r\n    [1,-1],\r\n    [-1,1],\r\n    [1,1],\r\n    [-1,-1],\r\n    [1,0],\r\n    [-1,0]\r\n];\r\n\r\nexport const clearGrid = ()=>{\r\n    const rows = [];\r\n    for (let i = 0; i < numRows; i++) {\r\n        rows.push(Array.from(Array(numCols).fill(0)));\r\n    \r\n      }\r\n\r\n      return rows;\r\n    };\r\n\r\n\r\n","import styled from 'styled-components'\r\n/////APP STYLES/////\r\n\r\n\r\nexport const AppCont = styled.div`\r\ntext-align: center;\r\nbox-sizing: border-box;\r\ndisplay:flex;\r\nflex-direction:column;\r\n\r\n`\r\n\r\nexport const Title = styled.h1`\r\nfont-size: 52px;\r\nfont-weight: heavy;\r\ncolor: teal;\r\nwidth: 80%;\r\nmargin-left: 5%;\r\nmargin-right: 5%;\r\nmargin:0 auto;\r\nalign-items: center;\r\n`\r\n\r\nexport const Pages = styled.div`\r\ntext-align: center;\r\ndisplay: flex;\r\nalign-items: center;\r\njustify-content: center;\r\n`\r\n\r\n////GRID STYLES////\r\n\r\n\r\n////CONTROLS///\r\nexport const Gen = styled.h2`\r\nfont-size: 30px;\r\ncolor: teal;\r\nbackground-color:grey;\r\n`\r\n\r\nexport const GridHolder = styled.div`\r\npadding: 3%;\r\n`\r\n\r\nexport const StyledButton = styled.button`\r\nbackground-color:teal;\r\ncolor: grey;\r\nwidth:15%;\r\nfont-size: 16px;\r\nfont-weight: bold;\r\nborder-radius: 10%;\r\nheight: 30px;\r\nmargin-left:5%;\r\nmargin-right:5%;\r\nmargin-top: 5px;\r\nmargin-bottom: 5px;\r\nborder-style:none;\r\n`\r\n\r\n///////ABOUT PAGE///////\r\nexport const AboutCont = styled.div`\r\ndisplay:flex;\r\nflex-direction:column;\r\njustify-content: space-between;\r\npadding: 5%;\r\n\r\n`\r\n\r\nexport const RulesCont = styled.div`\r\n\r\n`\r\n\r\nexport const RulesTitle = styled.h2`\r\nfont-size: 24px;\r\ncolor: teal;\r\n`\r\n\r\nexport const RulesList = styled.ol`\r\n\r\n`\r\n\r\nexport const RulesItems = styled.li`\r\n\r\n`\r\n\r\n\r\nexport const StoryCont = styled.div`\r\n\r\n`\r\n\r\nexport const StoryTitle = styled.h2`\r\nfont-size: 24px;\r\ncolor: teal;\r\n\r\n`\r\n\r\nexport const StoryContent = styled.div`\r\n\r\n`\r\nexport const StoryP =styled.p`\r\n\r\n`\r\n\r\n\r\n\r\n","import React, {useState, useCallback, useRef } from 'react';\r\nimport produce from 'immer';\r\nimport {numCols, numRows, ops, clearGrid} from './Helpers'\r\nimport {Gen, StyledButton, GridHolder} from './styles';\r\n\r\n\r\nfunction Grid(){\r\n\r\nconst [generation, setGen] = useState(0);\r\nconst genRef = useRef(generation)\r\ngenRef.current = generation\r\n\r\nconst [grid, setGrid] = useState(() => {\r\n return clearGrid();\r\n  });\r\n\r\n  const [running, setRunning] = useState(false);\r\n  const runRef = useRef(running);\r\n  runRef.current = running;\r\n\r\n  const [interval, setInterval]=useState('');\r\n  const intRef = useRef(interval);\r\n  intRef.current = interval;\r\n  \r\n  const handleChange = (e) => { \r\n    setInterval(e.target.value)\r\n}\r\n\r\n\r\n  const runSim = useCallback(() =>{\r\n    if (!runRef.current){\r\n        return; //'base case' if not running\r\n    }\r\n    setGrid(g =>{\r\n        return produce(g, gridCopy =>{ \r\n            for(let i =0; i < numRows; i++){\r\n                for(let k =0; k < numCols; k++){\r\n                    let neighbors = 0;\r\n                    ops.forEach(([x, y])=> {\r\n                        const newI = i + x;\r\n                        const newK = k + y;\r\n                        if (newI >= 0 && newI <numRows && newK >= 0 && newK <numCols){\r\n                            neighbors += g[newI][newK]\r\n                        }\r\n                    })\r\n        \r\n                    if (neighbors < 2 || neighbors > 3){\r\n                        gridCopy[i][k] = 0;\r\n                    } else if (g[i][k] === 0 && neighbors ===3){\r\n                        gridCopy[i][k] = 1; \r\n                    }\r\n                }\r\n            }\r\n        })\r\n        \r\n    })\r\n\r\n    \r\n    setTimeout(runSim, intRef.current); \r\n    setGen(genRef.current+1) \r\n    }, [ops]);\r\n\r\n\r\n  return (\r\n      <GridHolder>\r\n\r\n    <div className = 'control-cont'>\r\n  <Gen> GENERATION: {generation}</Gen>\r\n    <div className='speed'> \r\n    Speed: \r\n     <input\r\n    name='speed'\r\n    placeholder = 'speed'\r\n    value={intRef.current}\r\n    onChange={handleChange} /> \r\n    </div>\r\n\r\n    <StyledButton onClick={()=> {\r\n        setRunning(!running);\r\n        if (!running && interval){\r\n        runRef.current = true;\r\n        runSim();\r\n        } else if(!interval){\r\n            alert('need for speed');\r\n        }\r\n    }}\r\n    >\r\n    {running ? 'Stop' : 'Start'}\r\n    </StyledButton>\r\n    \r\n    <StyledButton onClick={()=>{\r\n        setGen(0)\r\n        setGrid(clearGrid());\r\n\r\n    }}\r\n    > Clear </StyledButton>\r\n    <StyledButton onClick={()=>{\r\n        const rows = [];\r\n        for (let i = 0; i < numRows; i++) {\r\n         rows.push(Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\r\n         );\r\n        }\r\n        setGrid(rows);\r\n    }}\r\n    > Random </StyledButton>\r\n\r\n        </div>   \r\n    \r\n      <div style={{\r\n          display: 'grid',\r\n          gridTemplateColumns: `repeat(${numCols}, 25px)`,\r\n          boxSizing: 'border-box' \r\n        }}\r\n      >\r\n        {grid.map((rows, i) =>\r\n          rows.map((col, k) => (\r\n            <div\r\n              key={`${i}-${k}`}\r\n              onClick={()=> {\r\n                  if (!running){\r\n                  const newGrid = produce(grid, gridCopy => {\r\n                      gridCopy[i][k] = grid[i][k] ? 0 : 1;\r\n                  });\r\n                  setGrid(newGrid);\r\n                } //not clickable while running\r\n            }} //onclick state changes: use copygrid to change state of grid. immer allows immutable change and generates new grid to make changes to instead, act as double buffering\r\n              style={{\r\n                width: 25,\r\n                height: 25,\r\n                backgroundColor: grid[i][k] ? 'gold' : 'black', \r\n                border: 'solid 1px purple',\r\n              }}\r\n            />\r\n          ))\r\n        )}\r\n      \r\n</div>\r\n</GridHolder>\r\n      /*GRID DISPLAY:\r\n        map over grid state\r\n        rows = array\r\n        rows.map =column\r\n        display dv that is box with 25 by 25 size\r\n        background color is based of if 0 or 1(dead or alive)\r\n        use index to get row/column index for color changing\r\n        (alive = gold, dead = blk)\r\n        grid[i][k] ternary for colors on index of row and columns\r\n        use index for rows, columns as key because they wont be moved\r\n        display in grid div, repeat, set how big\r\n        FOR ONCLICK: to change state, using plugin called immer\r\n        immer: \r\n        */\r\n        )\r\n        }\r\n\r\n        export default Grid;","\r\nimport React from 'react';\r\nimport {AboutCont, RulesTitle, StoryTitle} from './styles'\r\nconst About =() =>{\r\n\r\n    return (\r\n        <AboutCont>\r\n            <div>\r\n            <RulesTitle> Rules of Life: </RulesTitle>\r\n            <ul>\r\n                <li>\r\n                Any live cell with two or three live neighbours survives.\r\n                </li>\r\n                <li>\r\n                Any dead cell with three live neighbours becomes a live cell.\r\n                </li>\r\n                <li>\r\n                All other live cells die in the next generation. Similarly, all other dead cells stay dead.\r\n                </li>\r\n            </ul>\r\n\r\n            </div>\r\n            <div className = 'story-head'>\r\n            <StoryTitle>Story of Life: </StoryTitle>\r\n            <p>The Game of Life was developed by Brititsh Mathmetician, John Horton Conway, in 1970. It is a cellular automation, zero player game, that is turing complete. Developed with the initial goal of defining an interesting and unpredictable automation. Having the power of a universal Turing machine, anything that can be computed algorithmically can be computed with the Game Of Life.</p>\r\n\r\n            <p> The <span>'Universe of life'</span> is a 2D orthogonal grid of cells, each having 2 states: alive or dead. Each cell has 8 neighbors of possible alive.dead interactions per generation. Many different patterns are possible, and classified by their behavior. </p>\r\n            <p>More at <a href='https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life'> Wikepedia </a></p>\r\n            </div>\r\n        </AboutCont>\r\n    )\r\n}\r\n\r\nexport default About;","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Grid from './components/Grid'\nimport About from './components/About';\nimport {Pages, AppCont, Title} from './components/styles'\n\nfunction App() {\n  \n  return(\n  <AppCont>\n    <div className = 'home-title'>\n    <Title>Game Of Life</Title>\n    </div> \n    <Pages>\n\n    <Grid/>\n    <About/>\n\n    </Pages>\n    </AppCont> //App div end\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}